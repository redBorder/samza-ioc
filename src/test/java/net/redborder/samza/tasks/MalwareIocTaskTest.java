package net.redborder.samza.tasks;

import junit.framework.TestCase;
import net.redborder.samza.rules.RulesManager;
import net.redborder.samza.rules.base.FieldRule;
import net.redborder.samza.util.MockKeyValueStore;
import net.redborder.samza.util.MockMessageCollector;
import net.redborder.samza.util.MockTaskContext;
import org.apache.samza.config.Config;
import org.apache.samza.config.JavaSystemConfig;
import org.apache.samza.config.factories.PropertiesConfigFactory;
import org.apache.samza.system.IncomingMessageEnvelope;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RunWith(MockitoJUnitRunner.class)
public class MalwareIocTaskTest extends TestCase {
    @Test
    public void testInit() throws Exception {
        MockTaskContext mockTaskContext = new MockTaskContext();
        PropertiesConfigFactory propertiesConfigFactory = new PropertiesConfigFactory();
        Config config = propertiesConfigFactory.getConfig(
                URI.create("/Volumes/sd-card/redBorder/projects/samza-ioc/src/test/resources/config.properties"));


        MalwareIocTask malwareIocTask = new MalwareIocTask();
        malwareIocTask.init(config, mockTaskContext);

        assertEquals("1", malwareIocTask.iocs.get(0).iocUuid);
        assertTrue(malwareIocTask.iocs.get(0).rules.size() > 0);
    }

    @Test
    public void testProcess() throws Exception {
        MockTaskContext mockTaskContext = new MockTaskContext();
        IncomingMessageEnvelope incomingMessageEnvelope;
        Map<String, Object> message;

        MockMessageCollector mockMessageCollector = new MockMessageCollector();
        PropertiesConfigFactory propertiesConfigFactory = new PropertiesConfigFactory();
        Config config = propertiesConfigFactory.getConfig(
                URI.create("/Volumes/sd-card/redBorder/projects/samza-ioc/src/test/resources/config.properties"));


        MalwareIocTask malwareIocTask = new MalwareIocTask();
        malwareIocTask.init(config, mockTaskContext);
        message = new HashMap<>();
        message.put("field1", "value1");
        message.put("memoryField1", "memoryValue1");

        incomingMessageEnvelope = new IncomingMessageEnvelope(null, null, "ABZX", message);
        malwareIocTask.process(incomingMessageEnvelope, mockMessageCollector, null);

        assertEquals("[1111]", malwareIocTask.rulesManager.rulesStores.get("ABZX").toString());

        message = new HashMap<>();
        message.put("field3", "value3");
        message.put("memoryField1", "memoryValue1");

        incomingMessageEnvelope = new IncomingMessageEnvelope(null, null, "CDER", message);
        malwareIocTask.process(incomingMessageEnvelope, mockMessageCollector, null);

        assertEquals("[2222]", malwareIocTask.rulesManager.rulesStores.get("CDER").toString());
    }

    @Test
    public void testWindow() throws Exception {
        MockTaskContext mockTaskContext = new MockTaskContext();
        IncomingMessageEnvelope incomingMessageEnvelope;
        Map<String, Object> message;

        MockMessageCollector mockMessageCollector = new MockMessageCollector();
        PropertiesConfigFactory propertiesConfigFactory = new PropertiesConfigFactory();
        Config config = propertiesConfigFactory.getConfig(
                URI.create("/Volumes/sd-card/redBorder/projects/samza-ioc/src/test/resources/config.properties"));


        MalwareIocTask malwareIocTask = new MalwareIocTask();
        malwareIocTask.init(config, mockTaskContext);
        message = new HashMap<>();
        message.put("field1", "value1");
        message.put("field3", "value3");
        message.put("memoryField1", "memoryValue1");

        incomingMessageEnvelope = new IncomingMessageEnvelope(null, null, "ABZX", message);
        malwareIocTask.process(incomingMessageEnvelope, mockMessageCollector, null);

        malwareIocTask.window(mockMessageCollector, null);

        List<Map<String, Object>> result = mockMessageCollector.getResult();
        assertEquals("1", result.get(0).get("ioc"));
        assertEquals("2", result.get(1).get("ioc"));
        assertEquals("up", result.get(0).get("action"));
        assertEquals("up", result.get(1).get("action"));

        message = new HashMap<>();
        message.put("field2", "value2");
        message.put("memoryField1", "memoryValue1");

        assertTrue(malwareIocTask.iocStores.get("ABZX").contains("1"));
        assertTrue(malwareIocTask.iocStores.get("ABZX").contains("2"));

        incomingMessageEnvelope = new IncomingMessageEnvelope(null, null, "ABZX", message);
        malwareIocTask.process(incomingMessageEnvelope, mockMessageCollector, null);
        malwareIocTask.window(mockMessageCollector, null);

        Map<String, Object> down = mockMessageCollector.getResult().get(0);
        assertEquals("1", down.get("ioc"));
        assertEquals("ABZX", down.get("endpoint_uuid"));
        assertEquals("down", down.get("action"));

        assertTrue(malwareIocTask.iocStores.get("ABZX").contains("2"));
    }
}
