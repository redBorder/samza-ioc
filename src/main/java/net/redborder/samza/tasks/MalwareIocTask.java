package net.redborder.samza.tasks;

import net.redborder.samza.ioc.IOC;
import net.redborder.samza.ioc.Rule;
import net.redborder.samza.util.AerospikeStore;
import org.apache.samza.config.Config;
import org.apache.samza.storage.kv.Entry;
import org.apache.samza.storage.kv.KeyValueIterator;
import org.apache.samza.storage.kv.KeyValueStore;
import org.apache.samza.system.IncomingMessageEnvelope;
import org.apache.samza.task.*;

import java.util.*;

public class MalwareIocTask implements StreamTask, InitableTask, WindowableTask {
    AerospikeStore aerospikeStore;
    KeyValueStore<String, Set<Integer>> rulesStores;
    KeyValueStore<String, Set<Integer>> iocStores;
    List<Rule> rules = new LinkedList<>();
    List<IOC> iocs = new LinkedList<>();

    @Override
    public void init(Config config, TaskContext taskContext) throws Exception {
        this.aerospikeStore = new AerospikeStore(config);
        this.rulesStores = (KeyValueStore<String, Set<Integer>>) taskContext.getStore("rules");
        this.iocStores = (KeyValueStore<String, Set<Integer>>) taskContext.getStore("ioc");

        //TODO: Inicializar iocs y rules basandose en la configuracion.
    }

    @Override
    public void process(IncomingMessageEnvelope messageEnvelope, MessageCollector collector, TaskCoordinator taskCoordinator) throws Exception {
        String endpointUUID = (String) messageEnvelope.getKey();
        String message = (String) messageEnvelope.getMessage();

        Set<Integer> endpointRules = rulesStores.get(endpointUUID);

        if (endpointRules == null) {
            endpointRules = new HashSet<>();
        }

        for (Rule rule : rules) {
            if (rule.verify(message)) {
                endpointRules.add(rule.ruleUuid);
            } else {
                endpointRules.remove(rule.ruleUuid);
            }
        }

        rulesStores.put(endpointUUID, endpointRules);
    }

    @Override
    public void window(MessageCollector collector, TaskCoordinator taskCoordinator) throws Exception {
        KeyValueIterator<String, Set<Integer>> endpoints = rulesStores.all();

        while (endpoints.hasNext()) {
            Entry<String, Set<Integer>> endpoint = endpoints.next();
            Set<Integer> enabledIOCs = iocStores.get(endpoint.getKey());

            for (IOC ioc : iocs) {
                if (ioc.verify(endpoint.getValue())) {
                    if(!enabledIOCs.contains(ioc.iocUuid)){
                        enabledIOCs.add(ioc.iocUuid);
                        // TODO: Enviar mensaje activando IOC
                    }
                } else {
                    if(enabledIOCs.contains(ioc.iocUuid)){
                        enabledIOCs.remove(ioc.iocUuid);
                        // TODO: Enviar mensaje desactivando IOC
                    }
                }

                // TODO: Actualizar Aerospike
                iocStores.put(endpoint.getKey(), enabledIOCs);
            }
        }
    }
}
