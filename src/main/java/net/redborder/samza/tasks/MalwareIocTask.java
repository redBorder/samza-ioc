package net.redborder.samza.tasks;

import net.redborder.samza.ioc.IOC;
import net.redborder.samza.rules.RulesManager;
import net.redborder.samza.util.AerospikeStore;
import org.apache.samza.config.Config;
import org.apache.samza.storage.kv.Entry;
import org.apache.samza.storage.kv.KeyValueIterator;
import org.apache.samza.storage.kv.KeyValueStore;
import org.apache.samza.system.IncomingMessageEnvelope;
import org.apache.samza.task.*;

import java.util.*;

public class MalwareIocTask implements StreamTask, InitableTask, WindowableTask {
    AerospikeStore aerospikeStore;
    KeyValueStore<String, Set<String>> iocStores;
    List<IOC> iocs = new LinkedList<>();
    RulesManager rulesManager;
    @Override
    public void init(Config config, TaskContext taskContext) throws Exception {
        this.aerospikeStore = new AerospikeStore(config);
        this.iocStores = (KeyValueStore<String, Set<String>>) taskContext.getStore("ioc");
        this.rulesManager = new RulesManager(config, taskContext);

        //TODO: Inicializar iocs y rules basandose en la configuracion.


    }

    @Override
    public void process(IncomingMessageEnvelope messageEnvelope, MessageCollector collector,
                        TaskCoordinator taskCoordinator) throws Exception {
        String endpointUUID = (String) messageEnvelope.getKey();
        Map<String, Object> message = (Map<String, Object>) messageEnvelope.getMessage();

        rulesManager.verify(endpointUUID, message);
    }

    @Override
    public void window(MessageCollector collector, TaskCoordinator taskCoordinator) throws Exception {
        KeyValueIterator<String, Set<String>> endpoints = rulesManager.getRules();

        while (endpoints.hasNext()) {
            Entry<String, Set<String>> endpoint = endpoints.next();
            Set<String> enabledIOCs = iocStores.get(endpoint.getKey());

            Set<String> enabledRules = new HashSet<>();

            for (String rule : endpoint.getValue()) {
                enabledRules.add(rule.split(":")[0]);
            }

            for (IOC ioc : iocs) {
                if (ioc.verify(enabledRules)) {
                    if (!enabledIOCs.contains(ioc.iocUuid)) {
                        enabledIOCs.add(ioc.iocUuid);
                        // TODO: Enviar mensaje activando IOC
                    }
                } else {
                    if (enabledIOCs.contains(ioc.iocUuid)) {
                        enabledIOCs.remove(ioc.iocUuid);
                        // TODO: Enviar mensaje desactivando IOC
                    }
                }

                iocStores.put(endpoint.getKey(), enabledIOCs);
            }

            aerospikeStore.updateIOC(endpoint.getKey(), enabledIOCs);
        }
    }
}
